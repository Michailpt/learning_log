from django.db import models  # Импорт модуля models из Django
from django.contrib.auth.models import User
class Topic(models.Model):  # Определение модели Topic - представляет собой тему, которую изучает пользователь
    """Тема, которую изучает пользователь"""  # Документационная строка для класса
    text = models.CharField(max_length=200)  # Поле для текста темы (максимум 200 символов)
    date_added = models.DateTimeField(auto_now_add=True)  # Поле для даты добавления (автоматически устанавливается при создании)
    owner = models.ForeignKey(User, on_delete=models.CASCADE)
    def __str__(self):  # Метод для строкового представления объекта модели - возвращает текст темы
        """Возвращает строковое представление модели."""
        return self.text  # Возвращает текст темы
class Entry(models.Model):  # Определение модели Entry - представляет собой информацию, изученную пользователем по теме
    """Информация изученная пользователем по теме"""  # Документационная строка для класса
    topic = models.ForeignKey(Topic, on_delete=models.CASCADE)  # Внешний ключ к модели Topic (поле где выпадет спискок созданных Topic)
    text = models.TextField()  # Поле для текста записи (неограниченной длины)
    date_added = models.DateTimeField(auto_now_add=True)  # Поле для даты добавления (автоматически устанавливается при создании)
    class Meta:  # Внутренний класс для метаданных модели
        verbose_name_plural = 'entries'  # Название модели во множественном числе для административного интерфейса
    def __str__(self):  # Метод для строкового представления объекта модели - возвращает первые 50 символов текста записи с многоточием
        """Возвращает строковое представление модели."""  # Документационная строка для метода
        if len(self.text)>50:
            return f"{self.text[:50]}..."  # Возвращает первые 50 символов текста записи с многоточием
        else:
            return f"{self.text}"  # Возвращает текст записи